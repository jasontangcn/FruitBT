
	public static final int REQUEST_MESSAGE_BATCH_SIZE = 3;
	private Map<String, List<Integer>> indexesRequesting = new HashMap<String, List<Integer>>();




	public void requestMoreSlices(String infoHash, PeerConnection connection) {
		/*
		 * 1. Check the slices one by one and see whether there is peer which has this slice and is not choking me.
		 * 
		 * 2. Check the bitfield of the fastest peer and pick the slice this peer has but I do not have it yet. 
		 * 
		 * 3. Download slices from the peers who is unchoking me.
		 * 
		 * 
		 */
		FileMetadata fileMetadata = this.getDownloadTask(infoHash).getFileMetadata();
		if (fileMetadata.isAllPiecesCompleted())
			return;

		int index = connection.getIndexRequesting();

		if (index == -1) {
			BitSet selfBitfield = fileMetadata.getBitfield();
			BitSet peerBitfield = connection.getPeer().getBitfield();

			//for (int i = 0; i < peerBitfield.size(); i++) {
			for (int i = 0; i < peerBitfield.length(); i++) {
				if (peerBitfield.get(i) && !selfBitfield.get(i)) {
					List<Integer> indexes = this.indexesRequesting.get(infoHash);
					if (indexes == null) {
						indexes = new ArrayList<Integer>();
						this.indexesRequesting.put(infoHash, indexes);
						indexes.add(i);
						index = i;
						break;
					} else {
						if (!indexes.contains(i)) {
							indexes.add(i);
							index = i;
							break;
						}
					}
				}
			}
		}

		if (index != -1) {
			System.out.println("Requesting slices with index : " + index + ".");
			List<Slice> slices = fileMetadata.getNextBatchIncompletedSlices(index, REQUEST_MESSAGE_BATCH_SIZE);

			if (slices.size() != 0) {
				// It may start a download a new piece or download the remaining slices of a piece.
				connection.setIndexRequesting(index);
				connection.setRequestsSent(slices.size());
				List<PeerMessage> messages = new ArrayList<PeerMessage>();
				for (Slice slice : slices) {
					messages.add(new PeerMessage.RequestMessage(slice.getIndex(), slice.getBegin(), slice.getLength()));
				}
				System.out.println("Batch RequestMessage, messages size : " + slices.size() + ".");
				connection.addMessageToSend(messages);
			} else {
				// This pieces have been completed, try to find next one to download.
				this.indexesRequesting.get(infoHash).remove(new Integer(index)); // Be careful, new Integer(index) NOT index.
				connection.setIndexRequesting(-1);
				requestMoreSlices(infoHash, connection);
			}
		}
	}

	public void cancelRequestingPiece(String infoHash, PeerConnection connection) {
		int indexRequesting = connection.getIndexRequesting();
		if (indexRequesting != -1) {
			this.indexesRequesting.get(infoHash).remove(new Integer(indexRequesting));
		}
	}